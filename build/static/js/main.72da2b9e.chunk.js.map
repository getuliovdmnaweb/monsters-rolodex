{"version":3,"sources":["components/MonsterCard/index.jsx","components/MonsterCardList/index.jsx","App.js","serviceWorker.js","index.js"],"names":["MonsterCard","id","name","email","classes","useStyles","className","container","alt","src","createUseStyles","display","flexDirection","backgroundColor","width","height","margin","alignItems","justifyContent","image","MonsterCardList","monsterList","monsterCardList","map","monster","key","flexWrap","flex","minHeight","innerHeight","padding","header","color","fontFamily","fontSize","searchBox","borderRadius","marginBottom","App","window","useState","setMonsterList","filteredList","setFilteredList","useEffect","a","fetch","response","json","data","getData","type","onChange","value","target","newFilteredList","filter","toLowerCase","includes","placeholder","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAGaA,EAAc,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC/BC,EAAUC,IAChB,OACE,yBAAKC,UAAWF,EAAQG,WACtB,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BR,EAA1B,4BACtB,gCAAMC,GACN,2BAAIC,KAKJE,EAAYK,YAAgB,CAChCH,UAAW,CACTI,QAAS,OACTC,cAAe,SACfC,gBAAiB,UACjBC,MAAO,IACPC,OAAQ,IACRC,OAAQ,sBACRC,WAAY,SACZC,eAAgB,gBAElBC,MAAO,GACPjB,KAAM,GACNC,MAAO,KCvBIiB,EAAkB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAC1BjB,EAAUC,IAChB,OACE,yBAAKC,UAAWF,EAAQkB,iBACrBD,EAAYE,KAAI,SAACC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAQvB,GACbA,GAAIuB,EAAQvB,GACZC,KAAMsB,EAAQtB,KACdC,MAAOqB,EAAQrB,aAQrBE,EAAYK,YAAgB,CAChCY,gBAAiB,CACfX,QAAS,OACTG,MAAO,OACPC,OAAQ,OACRE,WAAY,aACZC,eAAgB,aAChBQ,SAAU,UCURrB,EAAYK,YAAgB,CAChCH,UAAW,CACTI,QAAS,OACTgB,KAAM,EACNC,UAAW,SAACC,GAAD,OAAiBA,GAC5BjB,cAAe,SACfC,gBAAiB,UACjBI,WAAY,SACZa,QAAS,mBAEXC,OAAQ,CACNC,MAAO,UACPC,WAAY,gBACZC,SAAU,IAEZC,UAAW,CACTxB,QAAS,OACTmB,QAAS,GACTM,aAAc,EACdC,aAAc,MAIHC,EA3DH,WACV,IAAMlC,EAAUC,EAAUkC,OAAOV,aADjB,EAEsBW,mBAAS,IAF/B,mBAETnB,EAFS,KAEIoB,EAFJ,OAGwBD,mBAAS,IAHjC,mBAGTE,EAHS,KAGKC,EAHL,KAsBhB,OAVAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,4DACY,6CADZ,SAEuBC,MADX,8CADZ,cAEMC,EAFN,gBAGmBA,EAASC,OAH5B,OAGMC,EAHN,OAIER,EAAeQ,GACfN,EAAgBM,GALlB,4CADc,uBAAC,WAAD,wBAQdC,KACC,IAED,yBAAK5C,UAAWF,EAAQG,WACtB,wBAAID,UAAWF,EAAQ2B,QAAvB,oBACA,2BACEzB,UAAWF,EAAQ+B,UACnBgB,KAAK,SACLC,SAvBgB,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MAC7BE,EAAkBlC,EAAYmC,QAAO,SAAChC,GAAD,OACvCA,EAAQtB,KAAKuD,cAAcC,SAASL,EAAMI,kBAE5Cd,EAAgBY,IAoBZI,YAAY,yBAEd,kBAAC,EAAD,CAAiBtC,YAAaqB,MCtBhBkB,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.72da2b9e.chunk.js","sourcesContent":["import React from \"react\";\nimport { createUseStyles } from \"react-jss\";\n\nexport const MonsterCard = ({id, name, email}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <img alt='monster' src={`https://robohash.org/${id}?set=set2&size=180x180`} />\n      <h2> {name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nconst useStyles = createUseStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: \"#95DADA\",\n    width: 330,\n    height: 350,\n    margin: '10px 10px 10px 10px',\n    alignItems: 'center',\n    justifyContent: 'space-evenly'\n  },\n  image: {},\n  name: {},\n  email: {},\n});\n","import React from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport { MonsterCard } from \"../MonsterCard\";\n\nexport const MonsterCardList = ({ monsterList }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.monsterCardList}>\n      {monsterList.map((monster) => {\n        return (\n          <MonsterCard\n            key={monster.id}\n            id={monster.id}\n            name={monster.name}\n            email={monster.email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst useStyles = createUseStyles({\n  monsterCardList: {\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n    alignItems: \"flex-start\",\n    justifyContent: \"flex-start\",\n    flexWrap: \"wrap\",\n  },\n});\n\n","import React, { useEffect, useState } from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport { MonsterCardList } from \"./components/MonsterCardList\";\nconst App = () => {\n  const classes = useStyles(window.innerHeight);\n  const [monsterList, setMonsterList] = useState([]);\n  const [filteredList, setFilteredList] = useState([]);\n\n  const searchMonster = ({ target: { value } }) => {\n    let newFilteredList = monsterList.filter((monster) =>\n      monster.name.toLowerCase().includes(value.toLowerCase())\n    );\n    setFilteredList(newFilteredList);\n  };\n\n  useEffect(() => {\n    async function getData() {\n      let url = \"https://jsonplaceholder.typicode.com/users\";\n      let response = await fetch(url);\n      let data = await response.json();\n      setMonsterList(data);\n      setFilteredList(data);\n    }\n    getData();\n  }, []);\n  return (\n    <div className={classes.container}>\n      <h1 className={classes.header}>Monsters Rolodex</h1>\n      <input\n        className={classes.searchBox}\n        type=\"search\"\n        onChange={searchMonster}\n        placeholder=\"Filtre Seus Monstros\"\n      />\n      <MonsterCardList monsterList={filteredList} />\n    </div>\n  );\n};\n\nconst useStyles = createUseStyles({\n  container: {\n    display: \"flex\",\n    flex: 1,\n    minHeight: (innerHeight) => innerHeight,\n    flexDirection: \"column\",\n    backgroundColor: \"#0D3A61\",\n    alignItems: \"center\",\n    padding: \"0px 10% 0px 10%\",\n  },\n  header: {\n    color: \"#45CAC4\",\n    fontFamily: \"Bigelow Rules\",\n    fontSize: 72,\n  },\n  searchBox: {\n    display: 'flex',\n    padding: 10,\n    borderRadius: 2,\n    marginBottom: 30\n  },\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}